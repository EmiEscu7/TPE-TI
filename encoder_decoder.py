from builtins import bytes
#from bitstring import BitArray

BUFFER_LENGTH = 8

class Encoder():

    def econde_sequence(self, codigo):
        result = bytearray()

        buffer = 0
        buffer_pos = 0
        #list_idx = 0

        i = 0
        while(i<len(codigo)):
            buffer = buffer << 1 #pongo un 0
            buffer_pos += 1
            if(codigo[i] == '1'):
                buffer = buffer | 1
            
            if(buffer_pos == BUFFER_LENGTH):            
                result.append(buffer)
                buffer = 0
                buffer_pos = 0
            
            i += 1

        if((buffer_pos < BUFFER_LENGTH) and (buffer_pos != 0)):
            while(buffer_pos != BUFFER_LENGTH):
                buffer = buffer << 1
                buffer_pos += 1
            result.append(buffer)
        
        return result


#NO TOCAR!!!!
class Decoder():

    
    #def decode_huffman(self, path):

    
    def decode_header(self, path):
        with open(path, "rb") as file:
            read = file.read()
        tam = int.from_bytes(read[1:4], "big")
        print(tam)
        i = 4
        cabecera = [tam]
        cant = 0
        while (cant < tam):
            dato = int.from_bytes(read[i:i+4], "big")
            i += 4
            valor = int.from_bytes(read[i:i+4], "big")
            i += 4
            cabecera.append(dato)
            cabecera.append(valor)
            cant += valor
        
        return [cabecera, read[i:]]



    def decode_sequence(self, path, length, is_huffman=False):
        restore = ""
        path += ".bin"
        if(is_huffman):
            [cabecera, read] = self.decode_header(path)
            print(str(cabecera))
        else:
            with open(path, "rb") as file:
                read = file.read()
        
        #print(read)
        global_idx = 0
        mask = 128 #las operacoines con byte/bits (&, |, ^, ~) trabajan con enteros
        buffer_pos = 0        
        i = 0      

        while(global_idx < length):
            buffer = read[i]

            while(buffer_pos < BUFFER_LENGTH):
                if((buffer & mask) == mask):
                    restore += '1'
                else:
                    restore += '0'
                
                buffer = (buffer << 1)
                buffer_pos += 1
                global_idx += 1

                if(global_idx == length):
                    break
            
            i += 1
            buffer_pos = 0
        
        if(is_huffman):
            return [restore, cabecera]
        else:
            return restore

#dataBTC = open("BTC.txt", 'r').readlines()
#dataETH = open("ETH.txt", 'r').readlines()
#cod
#encoder = Encoder()
#decdoer = Decoder()

#result = encoder.econde_sequence(cod)
#print(result)
#result = decdoer.decode_sequence("test", len(cod))
#print(result)


